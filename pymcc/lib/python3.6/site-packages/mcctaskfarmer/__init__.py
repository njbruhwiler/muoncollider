import itertools
import math
import shutil
import json
import os.path

from taskfarmer import task
import sio

class MarlinTaskList(task.ListTaskList):
    def __init__(self, path, workdir, steering, maxEventsPerJob=None, **kwargs):
        super().__init__(path, workdir)

        if maxEventsPerJob is not None:
            maxEventsPerJob=float(maxEventsPerJob)

        # Steering file
        self.steering = f'{workdir}/steering.xml'
        self.lock()
        if not os.path.exists(self.steering):
            shutil.copyfile(steering, self.steering)
        self.unlock()

        # Parse variables and arguments
        self.vars = {'workdir':workdir}
        self.args = {}

        for key,value in kwargs.items():
            if key.isupper():
                self.vars[key]=value
            else:
                self.args[key]=value

        # Create a record of what was run
        self.lock()
        metadata_path=f'{workdir}/metadata.json'
        if not os.path.exists(metadata_path):
            metadata={'filelist': path, 'args':self.args, 'vars':self.vars}
            with open(metadata_path, 'w') as fh:
                json.dump(metadata, fh)
        self.unlock()

        # Build a list of tasks
        filelist=list(self.tasks)
        self.tasks=[]
        for lciofile in filelist:
            task={'global.LCIOInputFiles':lciofile}
            if maxEventsPerJob==None: # Do not split events
                task['global.SkipNEvents'    ]=0
                task['global.MaxRecordNumber']=-1
                self.tasks.append(task.copy())
            else: # Split events
                # Count number of events
                nevents=0
                print(f'process {lciofile}')
                for record in sio.read_sio(lciofile):
                    if record.name=="LCEvent":
                        nevents+=1

                # Divide file into tasks
                for i in range(int(math.ceil(nevents/maxEventsPerJob))):
                    task['global.SkipNEvents'    ]=int(i*maxEventsPerJob)
                    task['global.MaxRecordNumber']=int(  maxEventsPerJob)
                    self.tasks.append(task.copy())

    def taskargs(self, taskid):
        basename=os.path.splitext(os.path.basename(self.tasks[taskid]['global.LCIOInputFiles']))[0]

        vars=self.vars.copy()
        vars['SAMPLE']=f'{basename}_{taskid}'

        args={}
        for key,value in self.args.items():
            args[key]=value.format(**vars)

        return args

    def __getitem__(self, taskid):
        task=self.tasks[taskid]

        args_task=map(lambda kv: f'--{kv[0]}={kv[1]}', task.items())
        args_opts=map(lambda kv: f'--{kv[0]}={kv[1]}', self.taskargs(taskid).items())

        args=' '.join(itertools.chain(args_task, args_opts))
        cmd=f'Marlin {self.steering} {args}'

        return cmd
